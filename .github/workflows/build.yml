# Build OneStory Editor

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the hg branch
  push:
    branches: [ hg ]
  pull_request:
    branches: [ hg ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: "./StoryEditor 2017.sln"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-2019   # [windows-latest]   # VS 2022 doesn't automatically include the proper .net framework 
    strategy:
       # Keep building other jobs even if another fails, to show what _is_ still working.
       fail-fast: false
       matrix:
         build_configuration: ["Debug", "Release"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Fetch nuget dependecies
        run: nuget restore "${{env.SOLUTION_FILE_PATH}}"

      # Download the ChorusMergeModule.msm and put it where the mm.wxs is expecting it (I put it in the packages folder, so if I upgrade Chorus, the link fails (when building locally) and reminds me that I need to pull it afresh)
      - name: download-chorusmergemodule
        if: ${{ success() && matrix.build_configuration == 'Release' }}
        shell: powershell
        run: | 
          (Get-Content 'Installer\Setup OneStoryEditor\MergeModules.wxs' -Raw) -match '(https://build.palaso.org/repository/download/Chorus_Win32masterContinuous/.*?:id/ChorusMergeModule.msm)(.*?\r?\n|$)+.*?SourceFile=\".*?(\\packages\\SIL.Chorus.App.*?\\ChorusMergeModule.msm)'
          $url = $Matches.1
          $localDownloadPath = $Env:GITHUB_WORKSPACE + $Matches.3
          echo "downloading from $($url) into $($localDownloadPath)"
          [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
          $WebClient = New-Object System.Net.WebClient
          $WebClient.DownloadFile($url,$localDownloadPath)
      
      - name: Build
        working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{matrix.build_configuration}} "${{env.SOLUTION_FILE_PATH}}"

      - name: rename installer
        if: ${{ success() && matrix.build_configuration == 'Release' }}
        run: cp "output/Setup OneStoryEditor_5.0_x86.exe" "output/Setup OneStoryEditor_5.0.${{github.run_number}}.exe"
        
      - name: publish artifact
        if: ${{ success() && matrix.build_configuration == 'Release' }}
        uses: actions/upload-artifact@v2.2.4
        with: 
          name: onestory-editor-installer-v5.0.latest
          path: "output/Setup OneStoryEditor_5.0.${{github.run_number}}.exe"
